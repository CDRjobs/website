type Job {
  id: ID!
  title: String!
  sourceUrl: String!
  disciplines: [String!]!
  locations: [Location!]
  remote: String!
  currency: String
  minSalary: Int
  maxSalary: Int
  minYearsOfExperience: Int
  guessedMinYearsOfExperience: Int
  publishedAt: String
  company: Company!
  contractTypes: [String!]!
}

input coordinatesInput {
  lat: Float!
  long: Float!
}

input locationInput {
  country: String
  coordinates: coordinatesInput
}

input minMaxYearsOfExperience {
  min: Int!
  max: Int!
}

input jobFiltersInput {
  openSearchToCountries: Boolean
  location: locationInput
  discipline: String
  cdrCategory: [String!]
  requiredExperience: [minMaxYearsOfExperience!]
  remote: [String!]
  contractType: [String!]
  companySize: [String!]
  companies: [String!]
}

input paginationInput {
  limit: Int = 24
  countAfter: String
  takeAfter: String
}

type Pagination {
  limit: Int!
  countAfter: String!
  takeAfter: String!
  total: Int!
}

type searchJobsResults {
  pagination: Pagination!
  data: [Job!]!
}

type Query {
  searchJobs(clientKey: String!, filters: jobFiltersInput, pagination: paginationInput): searchJobsResults
}